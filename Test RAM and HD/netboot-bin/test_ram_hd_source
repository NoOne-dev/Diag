#!/bin/sh

# Put this file in /var/netboot/bin on your tester drive.  Make sure this is in root's path.
# Additionally, put this file in NetBootClients0/bin on your netboot server.  With it in
# both locations, if your tester drive is used as a drive, these commands will work.  If
# it's used as a netboot master, it will be able to store log files on the server that
# survive a reboot.  Furthermore, if the script needs updating, the netboot image does not
# need to be recreated.

# Required software:  e2fsprogs plus this patch to badblocks:  http://sourceforge.net/tracker/?func=detail&aid=3411576&group_id=2406&atid=302406
# smartmontools, installed via MacPorts
# Rember.app, installed in /Applications


TERM=xterm-color

MEMTESTLIMIT=20
HDBADBLOCKLIMIT=1

export SERIALNUMBER="`system_profiler SPHardwareDataType | awk '/r \(system\)/ { print $4 }'`"

trap handle_trap SIGINT SIGTERM
trap handle_exit EXIT

handle_trap () {
	handle_trap_without_exit
	exit 1
}

handle_trap_without_exit () {
	echo "exiting due to ctrl-c..."
	
	if [ -e /var/netboot/Tests/$SERIALNUMBER/memtest.pid ]
	then
		kill -KILL `cat /var/netboot/Tests/$SERIALNUMBER/memtest.pid`
		rm /var/netboot/Tests/$SERIALNUMBER/memtest.pid
	fi

	for MEMTESTPID in `ps -axwww | grep memtest | awk '// { print $1 }'`
	do
		kill -KILL $MEMTESTPID >& /dev/null
	done
	
	for BADBLOCKSPID in `ps -axwww | grep badblocks | awk '// { print $1 }'`
	do
		kill -INT $BADBLOCKSPID >& /dev/null
	done

	show_hd_test_summary
	show_ram_test_summary
}

handle_exit () {
	echo "Cleaning up on exit..."
	if [ -e /var/netboot/Tests/$SERIALNUMBER/memtest.pid ]
	then
		kill -KILL `cat /var/netboot/Tests/$SERIALNUMBER/memtest.pid`
		rm /var/netboot/Tests/$SERIALNUMBER/memtest.pid
	fi
	
	exit 0
}


run_tests () {
	mkdir -p /var/netboot/Tests/$SERIALNUMBER/
	
	#cd /var/netboot/Tests/$SERIALNUMBER/
	
	test_ram
	
	echo "" >> /var/netboot/Tests/$SERIALNUMBER/hd_test.log
	date >> /var/netboot/Tests/$SERIALNUMBER/hd_test.log

	run_all_smart_tests | tee -a /var/netboot/Tests/$SERIALNUMBER/hd_test.log
	
	badblocks -m -v -e $HDBADBLOCKLIMIT /dev/rdisk0 1 >& /dev/null # spin up the drive and prep the first block
	
	badblocks -m -s -v -e $HDBADBLOCKLIMIT /dev/rdisk0 2>&1 | tee -a /var/netboot/Tests/$SERIALNUMBER/hd_test.log
}

test_ram () {
	if [ -e /var/netboot/Tests/$SERIALNUMBER/memtest.pid ]
	then
		kill -KILL `cat /var/netboot/Tests/$SERIALNUMBER/memtest.pid`
		rm /var/netboot/Tests/$SERIALNUMBER/memtest.pid
	fi
	echo "" >> /var/netboot/Tests/$SERIALNUMBER/memtest.log
	date >> /var/netboot/Tests/$SERIALNUMBER/memtest.log
	
	if [ -e /opt/local/bin/memtester ]
	then
		AVAILABLE_RAM="`vm_stat | awk '/Pages free/ { print $3\"*4096\" }' | bc`"
		RAM_TO_LEAVE_FREE="0"
		RAM_TO_ASK_FOR="`echo $AVAILABLE_RAM-$RAM_TO_LEAVE_FREE | bc`"
		echo "Available RAM:  $AVAILABLE_RAM  leaving free:  $RAM_TO_LEAVE_FREE  asking for:  $RAM_TO_ASK_FOR"
		/opt/local/bin/memtester "$RAM_TO_ASK_FOR"B $MEMTESTLIMIT >> /var/netboot/Tests/$SERIALNUMBER/memtest.log 2>&1 &
		jobs -l | awk '/memtest/ { print $2 }' > /var/netboot/Tests/$SERIALNUMBER/memtest.pid

		sleep 1
		
		while [ -n "`grep 'trying mlock' /var/netboot/Tests/$SERIALNUMBER/memtest.log | tail -n 2 | grep 'reducing'`" ]
		do
			kill -KILL `cat /var/netboot/Tests/$SERIALNUMBER/memtest.pid` >& /dev/null
			rm /var/netboot/Tests/$SERIALNUMBER/memtest.pid
			
			AVAILABLE_RAM="`vm_stat | awk '/Pages free/ { print $3\"*4096\" }' | bc`"
			# Increase by 1MB instead of by 4kB, which is what would happen automatically
			RAM_TO_LEAVE_FREE="`echo $RAM_TO_LEAVE_FREE+1048576 | bc`"
			RAM_TO_ASK_FOR="`echo $AVAILABLE_RAM-$RAM_TO_LEAVE_FREE | bc`"

			echo "Available RAM:  $AVAILABLE_RAM  leaving free:  $RAM_TO_LEAVE_FREE  asking for:  $RAM_TO_ASK_FOR"

			/opt/local/bin/memtester "$RAM_TO_ASK_FOR"B $MEMTESTLIMIT >> /var/netboot/Tests/$SERIALNUMBER/memtest.log 2>&1 &
			jobs -l | awk '/memtest/ { print $2 }' > /var/netboot/Tests/$SERIALNUMBER/memtest.pid

			sleep 1
		done
	else
		/Applications/Rember.app/Contents/Resources/memtest all $MEMTESTLIMIT >> /var/netboot/Tests/$SERIALNUMBER/memtest.log 2>&1 &
		jobs -l | awk '/memtest/ { print $2 }' > /var/netboot/Tests/$SERIALNUMBER/memtest.pid
	fi
	
}

#tail -n 1000 -f memtest.log

#BADBLOCKS="`awk '/Found bad block/ { total=total+1; } END { print total; }' hd_test.log`"

show_hd_test_summary () {
if [ -e /var/netboot/Tests/$SERIALNUMBER/hd_test.log ]
then
awk '/Found bad block/ { total=total+1; } \
/[0-9]+ ms:.*[0-9]+/ {\
	"tput setaf 1" | getline RED;\
	"tput setaf 3" | getline YELLOW;\
	"tput setaf 2" | getline GREEN;\
	"tput sgr0" | getline RESET;\
	if ( $2 < 100 ) \
		print GREEN $0 RESET;\
	else if ( $2 < 750 )\
	{\
		print YELLOW $0 RESET;\
		slow_ish=slow_ish+$4;\
	}\
	else {\
		print RED $0 RESET;\
		slow=slow+$4;\
	}\
}\
/bad:.*[0-9]+/ {\
	"tput setaf 1" | getline RED;\
	"tput sgr0" | getline RESET;\
	total=$2;\
	if ( $2 > 0 ) \
		print RED $0 RESET;\
	else\
		print GREEN $0 RESET;\
}\
/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).*/ {\
	"tput setaf 5" | getline PURPLE;\
	"tput sgr0" | getline RESET;\
	if ( date_count > 0 ) {\
		handle_end_of_test( $0 );}\
	else {\
		print PURPLE $0 RESET; }\
	date_count=date_count+1;\
	total=0;\
	slow=0;\
}\
/((Error:|Warning|SSD).*\/dev\/)|SMART|Current power on hours|occurred at disk power-on lifetime/ { print $0 }\
BEGIN {\
	date_count=0;\
}\
END {\
	handle_end_of_test( "" );\
}\
function handle_end_of_test(date) {\
	"tput setaf 5" | getline PURPLE;\
	"tput setaf 1" | getline RED;\
	"tput setaf 2" | getline GREEN;\
	"tput sgr0" | getline RESET;\
	if ( total > 0 ) {\
		print RED"Hard drive is bad.  Found " total " bad blocks before stopping."RESET;\
	} else {\
		print "Hard drive has no bad blocks.";\
	if ( slow > 0 )\
		print RED"Hard drive has slow blocks and may not be trustworthy"RESET;\
	if ( slow_ish > 99 )\
		print YELLOW"Hard drive has a fair number of somewhat slow blocks and may not be trustworthy"RESET;\
	}\
	print PURPLE date RESET;\
}' /var/netboot/Tests/$SERIALNUMBER/hd_test.log
fi
}

show_limited_ram_test_summary () {
if [ -e /var/netboot/Tests/$SERIALNUMBER/memtest.log ]
then
awk '/memtester/ {\
	is_running_memtester=1;\
}\
/Memtest / {\
	is_running_memtester=0;\
}\
/FAILURE/ { failed=failed+1; }\
/Test sequence/ {\
	current_test=$3;\
}\
/Loop [0-9]+\/[0-9]+/ {\
	current_test=$2;\
}\
/All tests passed/ {\
	current_test=current_test+1;\
}\
/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).*/ {\
	failed=0;\
}\
END {\
	handle_end_of_test( "" );\
}\
function handle_end_of_test(date) {\
	"tput setaf 1" | getline RED;\
	"tput setaf 3" | getline YELLOW;\
	"tput setaf 2" | getline GREEN;\
	"tput setaf 5" | getline PURPLE;\
	"tput sgr0" | getline RESET;\
	print PURPLE date RESET;\
	if ( failed > 0 )\
		print RED"This machine failed memtest"RESET;\
	else\
	{\
		if ( is_running_memtester > 0 ) \
			print GREEN"This machine passed "current_test" iterations of memtester"RESET;\
		else\
			print GREEN"This machine passed "current_test-1" iterations of memtest"RESET;\
	}\
}' /var/netboot/Tests/$SERIALNUMBER/memtest.log
fi
}

show_ram_test_summary () {
if [ -e /var/netboot/Tests/$SERIALNUMBER/memtest.log ]
then
awk '/memtester/ {\
	is_running_memtester=1;\
}\
/Memtest / {\
	is_running_memtester=0;\
}\
/FAILURE/ { failed=failed+1; }\
/Test sequence/ {\
	current_test=$3;\
}\
/Loop [0-9]+\/[0-9]+/ {\
	current_test=$2;\
}\
/All tests passed/ {\
	current_test=current_test+1;\
}\
/(Mon|Tue|Wed|Thu|Fri|Sat|Sun).*/ {\
	"tput setaf 5" | getline PURPLE;\
	"tput sgr0" | getline RESET;\
	if ( date_count > 0 ) {\
		handle_end_of_test( $0 );}\
	else {\
		print PURPLE $0 RESET; }\
	date_count=date_count+1;\
}\
END {\
	handle_end_of_test( "" );\
}\
function handle_end_of_test(date) {\
	"tput setaf 1" | getline RED;\
	"tput setaf 3" | getline YELLOW;\
	"tput setaf 2" | getline GREEN;\
	"tput setaf 5" | getline PURPLE;\
	"tput sgr0" | getline RESET;\
	if ( failed > 0 )\
		print RED"This machine failed memtest"RESET;\
	else\
	{\
		if ( is_running_memtester > 0 ) \
			print GREEN"This machine passed "current_test" iterations of memtester"RESET;\
		else\
			print GREEN"This machine passed "current_test-1" iterations of memtest"RESET;\
	}\
	print PURPLE date RESET;\
}' /var/netboot/Tests/$SERIALNUMBER/memtest.log
fi
}


follow_ram_test () {
	echo "Following RAM test results..."
	
	CURRENTITERSCOUNT="`awk '/Test sequence 1 of/ {\
failed=0;\
}\
/Test sequence/ {\
current_test=$3;\
}\
/All tests passed/ {\
current_test=current_test+1;\
}\
END { print current_test; }' /var/netboot/Tests/$SERIALNUMBER/memtest.log`"
		
	CURRENTFAILURECOUNT="`awk '/FAILURE/ { failed=failed+1; }\
BEGIN { failed=0; }\
/Test sequence 1 of/ {\
failed=0;\
}\
END {\
print failed;\
}' /var/netboot/Tests/$SERIALNUMBER/memtest.log`"

	if [ $CURRENTFAILURECOUNT -gt 0 ]
	then
		exit 0;
	fi
	
	echo "will sleep fifteen minutes between updates of memtest results..."
	
	while [ $CURRENTITERSCOUNT -lt $MEMTESTLIMIT -a $CURRENTFAILURECOUNT -eq 0  ]
	do
		show_limited_ram_test_summary
		
		if sleep 900 # fifteen minutes		
		then
			sleep 0 # noop
		else
			CURRENTITERSCOUNT=$MEMTESTLIMIT
			handle_trap_without_exit
			continue
		fi
	
		CURRENTITERSCOUNT="`awk '/Test sequence 1 of/ {\
failed=0;\
}\
/Test sequence/ {\
current_test=$3;\
}\
/All tests passed/ {\
current_test=current_test+1;\
}\
END { print current_test; }' /var/netboot/Tests/$SERIALNUMBER/memtest.log`"
		
		CURRENTFAILURECOUNT="`awk '/FAILURE/ { failed=failed+1; }\
BEGIN { failed=0; }\
/Test sequence 1 of/ {\
failed=0;\
}\
END {\
print failed;\
}' /var/netboot/Tests/$SERIALNUMBER/memtest.log`"
		
		if [ $CURRENTFAILURECOUNT -gt 0 ]
		then
			echo "Exiting due to RAM failure..."
			handle_trap_without_exit
			continue
		fi
	done
}


run_all_smart_tests () {
	RED=`tput setaf 1`
	YELLOW=`tput setaf 3`
	PURPLE=`tput setaf 5`
	RESET=`tput sgr0`

	SMARTCTL=/opt/local/sbin/smartctl

	# Turn on SMART support for the first drive.
	# Show health of first drive, even if it's good.
	if ( $SMARTCTL -s on -q errorsonly disk0 )
	then
		$SMARTCTL -H disk0
	else
		echo "Initial drive does not support SMART.  Note: USB and Firewire do not Support SMART."
	fi
	
	FOUND_HARD_DRIVE_ERRORS=0
	
	# Show health of remaining drives only if they exist, are supported, and are bad.
	
	# And yes, this implementation does mean that if there are more than ten drives/images attached
	# that only the first ten will be checked.  This could be rewritten/refactored to take
	# take advantage of the new list_internal_drives function, but the existing method asks the drive
	# itself whether it supports SMART, whereas using list_internal_drives makes assumptions about
	# which drives will support SMART.
	for disk in /dev/disk[0-9]
	do
		if [ -e $disk ]
		then
			# Try to turn on SMART, and check the tables if it's supported
			if ( $SMARTCTL -s on -q errorsonly $disk )
			then
				if [ $disk != /dev/disk0 ]
				then
					$SMARTCTL -H -q errorsonly $disk
				fi
				
				#true
				#CONTINUE_TESTING=0
				
				# HDD-specific tests
				
				CURRENTPENDINGSECTORS=`$SMARTCTL -A \$disk | awk '/Current_Pending_Sector/ { print $10 }'`
				
				# if this attribute exists
				if [ -n "$CURRENTPENDINGSECTORS" ] 
				then 
					# and there are errors
					if [ $CURRENTPENDINGSECTORS -gt 0 ]
					then
						echo $RED"Error:  $disk has current pending sectors: "  $CURRENTPENDINGSECTORS $RESET
						FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
						#CONTINUE_TESTING=1 #false
					fi 
				fi
				
				#if [ $CONTINUE_TESTING -eq 0 -o $IGNORE_SMART_ERRORS -eq 0 ]
				#then
					# else move on to the next attribute
					OFFLINEUNC=`$SMARTCTL -A \$disk | awk '/Offline_Uncorrectable/ { print $10 }'`
					
					# if this attribute exists
					if [ -n "$OFFLINEUNC" ] 
					then 
						# and there are errors
						if [ $OFFLINEUNC -gt 0 ]
						then
							echo $RED"Error:  $disk has offline uncorrectable sectors: " $OFFLINEUNC $RESET
							FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
							CONTINUE_TESTING=1 #false
						fi
					fi
				#fi
				
				#if [ $CONTINUE_TESTING -eq 0 -o $IGNORE_SMART_ERRORS -eq 0 ]
				#then
					# else move on to the next attribute
					REALLOC=`$SMARTCTL -A \$disk | awk '/Reallocated_Sector_Ct/ { print $10 }'`
					if [ -n "$REALLOC" ] 
					then
						if [ $REALLOC -gt 0 ]
						then
							echo $PURPLE"Warning:  $disk has reallocated sectors: " $REALLOC $RESET
							FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
							CONTINUE_TESTING=1 #false
						fi 
					fi
				#fi

				#if [ $CONTINUE_TESTING -eq 0 -o $IGNORE_SMART_ERRORS -eq 0 ]
				#then
					# else move on to the next attribute
					REALLOC_EV=`$SMARTCTL -A \$disk | awk '/Reallocated_Event_Count/ { print $10 }'`
					if [ -n "$REALLOC_EV" ] 
					then
						if [ $REALLOC_EV -gt 0 ]
						then
							echo $PURPLE"Warning:  $disk has reallocated events: " $REALLOC_EV $RESET
							FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
							CONTINUE_TESTING=1 #false
						fi 
					fi
				#fi

				# SSD-specific tests
				# This looks like a decent resource:  http://crystalmark.info/software/CrystalDiskInfo/manual-en/HealthStatus.html
				# More info will be needed on how to treat these as failures.
				#if [ $CONTINUE_TESTING -eq 0 -o $IGNORE_SMART_ERRORS -eq 0 ]
				#then
					# else move on to the next attribute
					BAD_CLUSTER=`$SMARTCTL -A \$disk | awk '/Bad_Cluster_Table_Count/ { print $10 }'`
					if [ -n "$BAD_CLUSTER" ] 
					then
						if [ $BAD_CLUSTER -gt 0 ]
						then
							echo $PURPLE"Warning:  $disk has bad cluster tables: " $BAD_CLUSTER $RESET
							FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
							CONTINUE_TESTING=1 #false
						fi 
					fi
				#fi

				#if [ $CONTINUE_TESTING -eq 0 -o $IGNORE_SMART_ERRORS -eq 0 ]
				#then
					# else move on to the next attribute
					ERASE_COUNT_VALUE=`$SMARTCTL -A \$disk | awk '/Erase_Count/ { print $4 }'`
					ERASE_COUNT_THRESH=`$SMARTCTL -A \$disk | awk '/Erase_Count/ { print $6 }'`
					ERASE_COUNT_RAW=`$SMARTCTL -A \$disk | awk '/Erase_Count/ { print $10 }'`
					if [ -n "$ERASE_COUNT_RAW" ] 
					then
						# This calculation is a wild guess.  On the one drive I've tested so far,
						# awk column $10 gives what appears may be percentage consumed (1%), whereas
						# the threshhold was at 100, and the value was at 199.  It's not clear yet
						# which numbers mean what.  The tester drive is JMicron family.
						ERASE_PERCENT=`echo 100 - $ERASE_COUNT_RAW | bc`
						if [ $ERASE_PERCENT -gt 50 ]
						then
							echo $YELLOW"SSD $disk appears to be at $ERASE_PERCENT% life." $RESET
						else
							echo $PURPLE"Warning:  $disk appears to be at $ERASE_PERCENT% life" $RESET
							FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
							CONTINUE_TESTING=1 #false
						fi 
					fi
				#fi
				
				# Generic log testing
				#if [ $CONTINUE_TESTING -eq 0 -o $IGNORE_SMART_ERRORS -eq 0 ]
				#then
					$SMARTCTL -l error $disk > /dev/null
					
					# do a binary AND against the seventh bit in the return value of the 
					# last command--per smartctl man page
					SMARTSTAT=$(($? & 64))
		
					if [ $SMARTSTAT -gt 0 ]
					then
						POWER_ON_HOURS=`$SMARTCTL -A \$disk | awk '/Power_On_Hours/ { print $10 }'`
						DAYS=`echo $POWER_ON_HOURS / 24 | bc`
						HOURS=`echo "$POWER_ON_HOURS - 24 * $DAYS" | bc`
						echo $YELLOW"Warning:  Found errors in SMART log for $disk at the following times:" $RESET
						echo "    Current power on hours: $POWER_ON_HOURS ($DAYS days + $HOURS hours)"
						$SMARTCTL -l error $disk | awk '/occurred at disk power-on lifetime/ { print "        " $0 }'
						FOUND_HARD_DRIVE_ERRORS=`echo $FOUND_HARD_DRIVE_ERRORS + 1 | bc`
						CONTINUE_TESTING=1 #false
					fi
				#fi
			fi
		fi
	done
}



show_connected_hds () {

# borrow applejack's scripts to start relevant services
startServices >& /dev/null

system_profiler -listDataTypes | egrep 'ATA|SCSI' | xargs system_profiler | awk '/BSD Name.*disk[0-9]+$/ { print $3 }' | xargs -n 1 diskutil info | awk '/Ejectable/ { if ( $2 == "No" ) print identifier; } /Device Identifier/ { identifier=$3; }'
}


#############################################################################
# Below here is mostly copied and pasted from applejack 1.6
# applejack's "loggit" function has been replaced with just "echo"

#	Let's find out Mac OS X version in order to start the right services.
OSV=`sw_vers 2>/dev/null | awk '/ProductVersion/ { print $2 }'`

ANIMAL=`echo $OSV | cut -f 2 -d . `

if [ -x /usr/bin/awk ];then AWK='/usr/bin/awk';else AWK='awk';BADENV=1;fi
if [ -x /usr/sbin/bless ];then BLESS='/usr/sbin/bless';else BLESS='bless';BADENV=1;fi
if [ -x /bin/chmod ];then CHMOD='/bin/chmod';else CHMOD='chmod';BADENV=1;fi
if [ -x /usr/sbin/chown ];then CHOWN='/usr/sbin/chown';else CHOWN='chown';BADENV=1;fi
if [ -x /bin/cp ];then CP='/bin/cp';else CP='cp';BADENV=1;fi
if [ -x /usr/bin/egrep ];then EGREP='/usr/bin/egrep';else EGREP='egrep';BADENV=1;fi
if [ -x /usr/bin/file ];then FILE='/usr/bin/file';else FILE='file';BADENV=1;fi
if [ -x /usr/bin/grep ];then GREP='/usr/bin/grep';else GREP='grep';BADENV=1;fi
if [ -x /usr/libexec/kextd ];then KEXTD='/usr/libexec/kextd';else KEXTD='kextd';BADENV=1;fi
if [ -x /bin/ln ];then LN='/bin/ln';else LN='ln';BADENV=1;fi
if [ -x /bin/ls ];then LS='/bin/ls';else LS='ls';BADENV=1;fi
if [ -x /bin/mkdir ];then MKDIR='/bin/mkdir';else MKDIR='mkdir';BADENV=1;fi
if [ -x /sbin/mount ];then MOUNT='/sbin/mount';else MOUNT='mount';BADENV=1;fi
if [ -x /bin/mv ];then MV='/bin/mv';else MV='mv';BADENV=1;fi
if [ -x /usr/bin/dscl ];then DSCL='/usr/bin/dscl';DSCLav=1;else DSCL='dscl';DSCLav=0;fi
if [ -x /usr/bin/plutil ];then PLUTIL='/usr/bin/plutil';else PLUTIL='plutil';BADENV=1;fi
if [ -x /bin/rm ];then RM='/bin/rm';else RM='rm';BADENV=1;fi
if [ -x /bin/rmdir ];then RMDIR='/bin/rmdir';else RMDIR='rmdir';BADENV=1;fi
if [ -x /usr/bin/sed ];then SED='/usr/bin/sed';else	SED='sed';BADENV=1;fi
if [ -x /usr/bin/tee ];then TEE='/usr/bin/tee';else	SED='tee';BADENV=1;fi

LOGFILE="/private/var/log/AppleJack.log"	#	Where does the AppleJack log go?

EX_OK=0 # successful termination
EX_ERR=1 # general error


# Not implemented, but a way to test mounting in real time rather than with 
# a status variable such as WRITEABLEROOT
# Snow Leopard: when mounted read-only, mount reports: 
# root_device on / (hfs, local, read-only, journaled)
# when mounted read/write, it reports:
# /dev/disk0s2 on / (hfs, local, journaled) 
# of course, one can always try to touch a file, like during the init of this 
# script.
function writable() {
	mount | while read -r line; do
		hit=`echo $line | grep 'root_device' | grep 'read-only'`
		if [ ! -z "$hit" ];then
			loggit "root disk mounted read only"
			return $EX_ERR
		fi
	done
	loggit "root disk mounted read+write"
	return $EX_OK
}

function mountem() {
	if [ -z "$WRITEABLEROOT" ];then
		WRITEABLEROOT=0
	elif [ $WRITEABLEROOT -eq 1 ];then
		echo "Root file system already mounted. Continue."
		return 0
	fi
	echo "Let's mount the startup file system for write access..."
	if $MOUNT -vuw /;then
		WRITEABLEROOT=1
		if [ -f /etc/fstab ]; then
			echo "Mounting local filesystems in fstab"
			$MOUNT -vat nonfs
		fi
		echo "Done."
		echo -n "Checking for /tmp directory: "
		if [ -d "/tmp" ];then
			echo "/tmp directory exists."
		else
			echo "${bW}/tmp directory does not exist${eW}"
			if [ ! -d "/private/tmp" ];then
				echo "${bW}/private/tmp does not exist either${eW}"
				echo -n "Creating /private/tmp: "
				$MKDIR -v "/private/tmp" | $TEE -a "$LOGFILE"
				echo -n "Setting correct permissions: "
				$CHMOD -v 1777 "/private/tmp" | $TEE -a "$LOGFILE"
			fi
			echo -n "Creating symbolic link from /tmp to /private/tmp: "
			$LN -sv "/private/tmp" "/tmp" | $TEE -a "$LOGFILE"
			if [ -d "/tmp" ];then
				echo "All set."
				SANDBOX="/tmp"
				cd "$SANDBOX"
			else
				echo "${bW}Could not create /tmp directory. Something seems to be wrong "
				echo "with your file system. Proceed with caution${eW}"
			fi
		fi
		echo "Done."
	else
		echo "${bE}Root file system could not be mounted. Script must quit.			  ${eE}"
		exit $EX_OSERR
	fi
	echo ""
	return 0
}

function services() {
	if [ -z "$SERVICES" ];then
		SERVICES=0	# Start assuming services have not been loaded
	elif [ "$SERVICES" -eq 1 ];then
		echo "- All supporting services appear to be loaded."
		return 0	# return success: services have been started
	fi
	# otherwise, check
	case "$ANIMAL" in
		4) 	
			cs="diskarbitrationd configd memberd notifyd securityd lookupd DirectoryService"
			;;
		5) 	
			cs="launchd notifyd configd syslogd distnoted DirectoryService diskarbitrationd kdcmond KernelEventAgent securityd"
			;;
		6) 	
			cs="launchd notifyd configd syslogd distnoted DirectoryService diskarbitrationd KernelEventAgent securityd"
			;;
	esac

	pss=`ps -axco command`
	m=0
	ct=0
	for c in $cs;do
		let "ct=$ct+1"
		for ps in $pss;do
			if [ "$c" = "$ps" ];then
				let "m=$m+1"
				break
			fi
		done
	done
	if [ $ct -eq $m ];then
		SERVICES=1
		echo "- All supporting services appear to be loaded."
		return $EX_OK	# return true
	fi
	echo "- All supporting services are not loaded."
	return $EX_ERR	# return false
}

function startServices() {
	if services; then
		return 0
	fi

	# make sure file system is mounted for read/write access
	mountem

	case "$ANIMAL" in 
		4 ) 
			echo "Configuring minimal Tiger services..."
			(
				SafeBoot='-x'
				export -n SafeBoot

				# Create mach symbol file
				sysctl -n kern.symfile
				if [ -f /mach.sym ]; then
					ln -sf /mach.sym /mach
				else
					ln -sf /mach_kernel /mach
				fi

				echo "Configuring kernel extensions for safe boot"
				touch /private/tmp/.SafeBoot
				# $KEXTD -x
				# c=don't use repositories, -v 1 =quiet, print only errors
				# x=run in safe boot mode
				$KEXTD -c -v 1 -x

				echo "Loading basic launchd services..."
				(
					launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
					launchctl load /etc/mach_init.d/notifyd.plist
					wait
					syslog -c 0 -p
					# throw syslog output away from the screen
					syslog -x /dev/null >/dev/null
					wait 
					for plist in configd coreservicesd DirectoryService diskarbitrationd distnoted hdiejectd kuncd lookupd mds memberd notifyd scsid securityd translated; do
						launchctl load /etc/mach_init.d/${plist}.plist > /dev/null 2>&1 &
						wait
					done
					for plist in com.apple.KernelEventAgent com.apple.nibindd; do
						launchctl load /System/Library/LaunchDaemons/${plist}.plist > /dev/null 2>&1 &
						wait
					done
				) 2>&1>/dev/null &
				wait
			) 2>&1>/dev/null &
			wait
			;;
		5 ) 
			echo "Configuring minimal Leopard services..."
			(
				SafeBoot='-x'
				export -n SafeBoot

				echo "Configuring kernel extensions for safe boot"
				touch /private/tmp/.SafeBoot

				# launchd is handling kextd startup in Leopard
				# but we can't configure it with the plist
				# launchctl load /System/Library/LaunchDaemons/com.apple.kextd.plist
				# $KEXTD -x
				# c=don't use repositories, v 1 =quiet, print only errors
				# x=run in safe boot mode
				$KEXTD -c -v 1 -x

				############################################################
				# Many thanks to Steve Anthony for his substantial effort in
				# figuring out the startup sequence for Leopard.
				############################################################
				echo "Loading basic launchd services..."
				(
					launchctl load /System/Library/LaunchDaemons/com.apple.notifyd.plist
					launchctl load /System/Library/LaunchDaemons/com.apple.configd.plist
					launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
					wait
					syslog -c 0 -p
					# throw syslog output away from the screen
					syslog -x /dev/null >/dev/null
					wait 
					for plist in  com.apple.coreservicesd com.apple.DirectoryServices com.apple.DirectoryServicesLocal com.apple.diskarbitrationd com.apple.kdcmond com.apple.distnoted com.apple.hdiejectd com.apple.notifyd com.apple.scsid com.apple.securityd com.apple.KernelEventAgent com.apple.installdb.system; do
						launchctl load /System/Library/LaunchDaemons/${plist}.plist > /dev/null 2>&1 &
						wait
					done
				) 2>&1>/dev/null &
				wait
			) 2>&1>/dev/null &
			wait
			;;
		6 ) 
			echo "Configuring minimal Snow Leopard services..."
			(
				# Probably going overboard here with the environment variable
				# AND the flag, but I can't see the logic of how it's being read
				# down the line, so playing it safe.
				SafeBoot='-x'
				export -n SafeBoot
				
				echo "Configuring kernel extensions for safe boot"
				touch /private/tmp/.SafeBoot
				# launchctl load /System/Library/LaunchDaemons/com.apple.kextd.plist
				# launchd should be handling kextd startup in Leopard
				# but we can't configure it with the plist
				# c=don't use repositories, q=quiet, print only errors
				# x=run in safe boot mode
				$KEXTD -c -q -x
				
				############################################################
				# Many thanks to Steve Anthony for his substantial effort in
				# figuring out the startup sequence for Snow Leopard.
				############################################################
				echo "Loading basic launchd services..."
				(
					launchctl load /System/Library/LaunchDaemons/com.apple.notifyd.plist
					launchctl load /System/Library/LaunchDaemons/com.apple.configd.plist
					launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
					wait
					syslog -c 0 -p
					# throw syslog output away from the screen
					syslog -x /dev/null >/dev/null
					wait 
					for plist in  com.apple.kuncd com.apple.KernelEventAgent com.apple.distnoted com.apple.aslmanager com.apple.DirectoryServices com.apple.DirectoryServicesLocal com.apple.coreservicesd com.apple.diskmanagementd com.apple.securityd com.apple.diskarbitrationd com.apple.fseventsd; do
						launchctl load /System/Library/LaunchDaemons/${plist}.plist > /dev/null 2>&1 &
						wait
					done
				) 2>&1>/dev/null &
				wait
			) 2>&1>/dev/null &
			wait
			;;
		* )
			;;
	esac
	echo ""
	echo "Waiting for services to start..."
	echo ""
	sleep 15
#	echo "Done. -${exit_status}-"
	echo "Done."
	SERVICES=1
	echo ""
	echo ""
	return
}

